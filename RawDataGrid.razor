@using System.Reflection
@using System.Dynamic
@using System.IO
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.JSInterop
@using System.Text
@using SomeComponents;
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime;

@*@if (Loading)
{
    <div>Загрузка...</div>
}
else*@

<div class="@(Loading ? "opacity-25" : "")">
    <div class="hstack gap-3">
        @if (CreateButtonVisible)
        {
            <a class="btn btn-primary" href="@($"{EntitiesLink}/0")" role="button">
                Создать
            </a>
        }
        <div class="ms-auto">
            <div class="input-group">
                <button class="btn btn-outline-secondary" type="button"
                        disabled="@(TotalPages == 1 || CurrentPage == 1)"
                        @onclick="FirstPageClick" title="Первая страница">
                    <span>&laquo;</span>
                </button>
                <button class="btn btn-outline-secondary" type="button"
                        disabled="@(TotalPages == 1 || CurrentPage == 1)"
                        @onclick="PreviousPageClick" title="Предыдущая страница">
                    <span>&lsaquo;</span>
                </button>
                <span class="input-group-text">
                    Записей:
                    @(EntitiesTotalCount > PageSize
                        ? $"{Entities.Count} из {EntitiesTotalCount} (стр. {CurrentPage}/{TotalPages})"
                        : $"{Entities.Count}")
                </span>
                <button class="btn btn-outline-secondary" type="button"
                        disabled="@(TotalPages == 1 || CurrentPage == TotalPages || Entities.Count == 0)"
                        @onclick="NextPageClick" title="Следующая страница">
                    <span>&rsaquo;</span>
                </button>
                <button class="btn btn-outline-secondary" type="button"
                        disabled="@(TotalPages == 1 || CurrentPage == TotalPages || Entities.Count == 0)"
                        @onclick="LastPageClick" title="Последняя страница">
                    <span>&raquo;</span>
                </button>
            </div>
        </div>
        <div>
            <div class="input-group">
                <input class="form-control @(SearchTextIsDirty ? "is-dirty" : "")"
                       @bind="SearchText" @bind:event="oninput" @onkeydown="@SearchTextInputEnter"
                       placeholder="Поиск" />
                <button class="btn btn-outline-secondary" type="button"
                        @onclick="ClearSearchText" title="Очистить">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
        </div>
        <div>
            <button @onclick="DownloadFileFromStream" type="button" class="btn btn-outline-secondary"
                    title="Сохранить в CSV">
                <i class="bi bi-download"></i>
            </button>
        </div>
        <div>
            <button @onclick="InvokeLoadData" type="button" class="btn btn-outline-secondary" title="Обновить">
                <i class="bi bi-arrow-clockwise"></i>
            </button>
        </div>
    </div>
    <br />
    <table class="table table-sm table-bordered table-striped">
        <thead>
            <tr>
                <th class="fit">@(ChooseOneEntity ? "Выбрать" : "Открыть")</th>
                @foreach (var column in Columns)
                {
                    <th @onclick="() => OnColumnClick(column.PropertyName)" role="button">
                        <div class="hstack gap-3">
                            <div>@column.DisplayName</div>
                            <div class="ms-auto">
                                @if (SortingColumn == column.PropertyName)
                                {
                                    @if (SortingDescending)
                                    {
                                        <i class="bi bi-sort-down"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-sort-up"></i>
                                    }
                                }
                            </div>
                        </div>
                    </th>
                }

                @if (DeleteButtonVisible)
                {
                    <th class="fit"></th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var entity in Entities)
            {
                <tr>
                    <td>
                        @if (ChooseOneEntity)
                        {
                            <button @onclick="@(async () => await OnEntityChoose.InvokeAsync(entity["Id"]))" type="button" class="btn btn-outline-secondary btn-sm">Выбрать</button>
                        }
                        else
                        {
                            <a class="btn btn-outline-secondary btn-sm" href="@($"{EntitiesLink}/{entity["Id"]}")" role="button">
                            <i class="bi bi-search"></i>
                            </a>
                        }
                    </td>
                    @foreach (var key in entity.Keys)
                    {
                        <td>@(entity[key])</td>
                    }
                    @if (DeleteButtonVisible)
                    {
                        <td>
                            <button @onclick="async () => await TrClickedDelete(entity)" type="button" class="btn btn-danger btn-sm">Удалить</button>
                        </td>
                    }

                </tr>
            }
        </tbody>
    </table>
</div>

@code {

    //[Parameter]
    //public IView View { get; set; }

    //private Dictionary<string, string> _fieldDisplayNames = new();

    [Parameter]
    public List<Column> Columns { get; set; } = new();

    //private List<BaseView> _views = new();

    [Parameter]
    public List<Dictionary<string, string>> Entities { get; set; } = new();

    [Parameter]
    public bool CreateButtonVisible { get; set; } = true;

    public bool Loading { get; set; } = true;

    [Parameter]
    public bool ChooseOneEntity { get; set; } = false;

    [Parameter]
    public bool DeleteButtonVisible { get; set; } = true;

    [Parameter]
    public string? EntitiesLink { get; set; }

    //public List<IEntity> Entities { get; set; } = new List<IEntity>();

    private string? _searchText;

    public string? SearchText
    {
        get
        {
            return _searchText;
        }
        set
        {
            _searchText = value;
            SearchTextIsDirty = true;
        }
    }

    public bool SearchTextIsDirty { get; set; } = false;

    [Parameter]
    public int EntitiesTotalCount { get; set; }

    [Parameter]
    public int PageSize { get; set; } = 50;

    public int CurrentPage { get; set; } = 1;

    public int TotalPages { get; set; }

    public string SortingColumn { get; set; } = "Id";

    public bool SortingDescending { get; set; } = true;

    [Parameter]
    public EventCallback<LoadDataArgs> LoadData { get; set; }

    [Parameter]
    public EventCallback<string> OnEntityDelete { get; set; }

    [Parameter]
    public EventCallback<string> OnEntityChoose { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //Console.WriteLine($"RawDataGrid.OnInitializedAsync: Start");

        await InvokeLoadData();
    }

    public async Task InvokeLoadData()
    {
        //Console.WriteLine($"RawDataGrid.InvokeLoadData: {LoadData.HasDelegate}");
        Loading = true;

        var loadDataArgs = new LoadDataArgs();
        loadDataArgs.SearchText = SearchText;
        loadDataArgs.CurrentPage = CurrentPage;
        loadDataArgs.SortingColumn = SortingColumn;
        loadDataArgs.SortingDescending = SortingDescending;
        loadDataArgs.PageSize = PageSize;

        await LoadData.InvokeAsync(loadDataArgs);

        //CurrentPage = loadDataArgs.CurrentPage;
        TotalPages = (int)Math.Ceiling(EntitiesTotalCount / (decimal)PageSize);

        SearchTextIsDirty = false;
        Loading = false;

        //StateHasChanged();
    }

    public async Task TrClickedDelete(Dictionary<string, string> entity)
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Удалить запись?");

        if (!confirmed)
        {
            return;
        }

        await OnEntityDelete.InvokeAsync(entity["Id"]);

        await InvokeLoadData();
    }

    private Stream GetFileStream()
    {
        var columns = string.Join(",", Columns.Select(x => RawDataGrid.StringToCSVCell(x.DisplayName)));

        var data = $"";

        foreach (var entity in Entities)
        {
            data += $"{string.Join(",", entity.Values.Select(x => RawDataGrid.StringToCSVCell(x)))}\r\n";
        }

        var fileStream = new MemoryStream(Encoding.UTF8.GetBytes($"{columns}\r\n{data}"));

        return fileStream;
    }

    private async Task DownloadFileFromStream()
    {
        var fileStream = GetFileStream();
        var fileName = $"{DateTime.UtcNow:yyyy-MM-dd_HH-mm-ss}.csv";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await JsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    public async Task SearchTextInputEnter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await InvokeLoadData();
        }
    }

    public async Task ClearSearchText()
    {
        SearchText = "";
        await InvokeLoadData();
    }

    public async Task FirstPageClick()
    {
        CurrentPage = 1;
        await InvokeLoadData();
    }

    public async Task PreviousPageClick()
    {
        CurrentPage--;
        await InvokeLoadData();
    }

    public async Task NextPageClick()
    {
        CurrentPage++;
        await InvokeLoadData();
    }

    public async Task LastPageClick()
    {
        CurrentPage = TotalPages;
        await InvokeLoadData();
    }

    public async Task OnColumnClick(string columnKey)
    {
        //Console.WriteLine($"OnColumnClick: columnKey: {columnKey}");

        if (SortingColumn != columnKey)
        {
            SortingColumn = columnKey;
            SortingDescending = false;
        }
        else
        {
            if (!SortingDescending)
            {
                SortingDescending = true;
            }
            else
            {
                SortingColumn = "";
            }
        }

        await InvokeLoadData();
    }
}